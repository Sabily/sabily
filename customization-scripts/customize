#!/bin/bash

function failure()
{
	echo "$@"
	exit 1
}

function prepare_install()
{
	sed -i "s|# deb http://archive.ubuntu.com/ubuntu hardy universe|deb http://archive.ubuntu.com/ubuntu hardy universe multiverse|" /etc/apt/sources.list ||  failure "sed failed, error=$?"
	sed -i "s|# deb-src http://archive.ubuntu.com/ubuntu hardy universe|deb-src http://archive.ubuntu.com/ubuntu hardy universe multiverse|" /etc/apt/sources.list 
	#try 2 times to avoid slow proxies failures
	aptitude update || aptitude update || failure "aptitude update failed, error=$?"
}

function install_packages()
{
	aptitude install --assume-yes "$@" || failure "aptitude install $@ failed, error=$?"
}

function remove_packages()
{
	aptitude remove --assume-yes "$@" || failure "aptitude remove $@ failed, error=$?"
}

function run_package_manager()
{
	echo "Starting package application..."
	
	PACKAGE_APP=`which adept`
	PACKAGE_APP_OPTIONS=(--caption "UCK Package Manager")
	if [ "$PACKAGE_APP" = "" ]; then
		PACKAGE_APP=`which adept_manager`
	fi
	if [ "$PACKAGE_APP" = "" ]; then
		PACKAGE_APP=`which synaptic`
		PACKAGE_APP_OPTIONS=(-t "UCK Package manager")
	fi
	
	if [ "$PACKAGE_APP" = "" ]; then
		dialog_msgbox "Failure" "Unable to find any package manager application"
	else
		$PACKAGE_APP "${PACKAGE_APP_OPTIONS[@]}"
		RESULT=$?
	
		if [ $RESULT -ne 0 ]; then
			dialog_msgbox "Failure" "Running package application $PACKAGE_APP failed, error=$RESULT"
		fi
	fi
}

function run_console()
{
	echo "Starting console application..."
	
	CONSOLE_APP=`which konsole`
	CONSOLE_APP_OPTIONS=(--caption "UCK customization console" -e /bin/bash)
	if [ "$CONSOLE_APP" = "" ]; then
		CONSOLE_APP=`which gnome-terminal`
		CONSOLE_APP_OPTIONS=(-t "UCK customization console" -e /bin/bash)
	fi
	if [ "$CONSOLE_APP" = "" ]; then
		CONSOLE_APP=`which xfce4-terminal`
		CONSOLE_APP_OPTIONS=(-t "UCK customization console" -e /bin/bash)
	fi
	if [ "$CONSOLE_APP" = "" ]; then
		CONSOLE_APP=`which xterm`
		CONSOLE_APP_OPTIONS=(-title "UCK customization console" -e /bin/bash)
	fi
	
	if [ "$CONSOLE_APP" = "" ]; then
		dialog_msgbox "Failure" "Unable to find any console application"
	else
		$CONSOLE_APP "${CONSOLE_APP_OPTIONS[@]}"
		RESULT=$?
	
		if [ $RESULT -ne 0 ]; then
			dialog_msgbox "Failure" "Running console application $CONSOLE_APP failed, error=$RESULT"
		fi
	fi
}

SCRIPT_DIR=`dirname "$0"`
. "$SCRIPT_DIR/gui.sh"

LIVECD_LANGS=`cat "$SCRIPT_DIR/language_packs"`
RUN_MANUAL_CUSTOMIZATIONS=`cat "$SCRIPT_DIR/run_manual_customizations"`
DESKTOP_TYPE=`cat "$SCRIPT_DIR/desktop_type"`

if [ -z "$LIVECD_LANGS" ]; then
	failure "Live CD language not set, please put language packs codes (for example: en, pl, fr) into $SCRIPT_DIR/language_packs"
fi

DESKTOP_FLAVOURS=`cat "$SCRIPT_DIR/desktop_types"`

prepare_install || failure "Preparing installation failed, error=$?"

echo "Installing language packs ($LIVECD_LANGS)..."

PACKAGES_TO_INSTALL=""
LANGPACKS_CONCATENATED=""

for LANGPACK in $LIVECD_LANGS; do
	PACKAGES_TO_INSTALL="$PACKAGES_TO_INSTALL language-pack-$LANGPACK language-support-$LANGPACK"
	if [ "$DESKTOP_FLAVOURS" ]; then
		for FLAVOUR in $DESKTOP_FLAVOURS; do
			if [ $FLAVOUR == "gnome" ] || [ $FLAVOUR == "kde" ]; then
				PACKAGES_TO_INSTALL="$PACKAGES_TO_INSTALL language-pack-$FLAVOUR-$LANGPACK"
			fi
		done
	fi

	if [ -z "$LANGPACKS_CONCATENATED" ]; then
		LANGPACKS_CONCATENATED="$LANGPACK"
	else
		LANGPACKS_CONCATENATED="$LANGPACKS_CONCATENATED|$LANGPACK"
	fi
done

#install_packages $PACKAGES_TO_INSTALL || failure "Installing language packs failed, error=$?"

#NOTE: we first install language pack, then remove others as installing language pack might pull packages
#which were not previously present
echo "Removing unnecessary language packages..."
REMOVED_PACKAGES=`dpkg-query --show | cut -f1 | grep -E '^(language-pack|language-support)' | grep -v -E "[-]($LANGPACKS_CONCATENATED)\>"`
remove_packages $REMOVED_PACKAGES || failure "Removing packages failed, error=$?"
echo removed: $REMOVED_PACKAGES

cd /tmp
chmod u+x install-ubuntuME.sh
./install-ubuntuME.sh
cd /

remove_packages openoffice.org-base openoffice.org-calc openoffice.org-common  openoffice.org-draw openoffice.org-evolution openoffice.org-gnome openoffice.org-gtk openoffice.org-impress openoffice.org-java-common openoffice.org-math openoffice.org-writer python-uno openoffice.org openoffice.org-core openoffice.org-l10n-common openoffice.org-filter-binfilter gnome-games gnome-games-data example-content || failure "Removing packages failed, error=$?"

install_packages bzr aptoncd  xfonts-intl-arabic ttf-arabeyes aspell-ar ttf-kacst ttf-farsiweb flashplugin-nonfree sun-java6-plugin zekr-quran-translations-fr zekr-quran-translations-nl zekr-quran-translations-ru zekr-quran-translations-ur zekr-quran-translations-bs zekr-quran-translations-fa zekr-quran-translations-id zekr-quran-translations-tr zekr-quran-translations-pt acon || failure "Installing packages failed, error=$?"

aptitude clean
aptitude autoclean


if [ "$RUN_MANUAL_CUSTOMIZATIONS" = "yes" ] ; then
	while true ; do
		CHOICE_PACKAGE_MANAGER="Run package manager"
		CHOICE_CONSOLE="Run console application"
		CHOICE_EXIT="Continue building"
		CHOICE=`dialog_menu "Please choose customization action" "$CHOICE_PACKAGE_MANAGER" "$CHOICE_CONSOLE" "$CHOICE_EXIT"`
		RESULT=$?

		if [ $RESULT -ne 0 ] ; then
			failure "Script cancelled by user"
		fi
		#workaround for KDE bug (https://bugs.kde.org/show_bug.cgi?id=139025)
		CHOICE=`echo "$CHOICE" | grep -v -i kwrited | tail -n1`

		echo "CHOICE='$CHOICE'"

		if [ "$CHOICE" = "$CHOICE_EXIT" ] ; then
			break
		elif [ "$CHOICE" = "$CHOICE_PACKAGE_MANAGER" ] ; then
			run_package_manager
		elif [ "$CHOICE" = "$CHOICE_CONSOLE" ] ; then
			run_console
		fi
	done
fi

echo "Done customize.sh"
